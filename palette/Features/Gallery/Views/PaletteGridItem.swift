//
//  PaletteGridItem.swift
//  palette
//
//  Created by Claude on 2025/08/14.
//

import SwiftUI

// MARK: - パレットグリッドアイテム
struct PaletteGridItem: View {
    
    // MARK: - Properties
    let palette: ColorPalette
    let isSelected: Bool
    let isFavorite: Bool
    let isSelectionMode: Bool
    let isGridView: Bool
    let onTap: () -> Void
    let onFavorite: () -> Void
    let onDelete: () -> Void
    let onDuplicate: () -> Void
    let onShare: () -> Void
    
    @State private var isPressed = false
    
    // MARK: - Body
    var body: some View {
        if isGridView {
            gridViewContent
        } else {
            listViewContent
        }
    }
    
    // MARK: - Grid View Content
    private var gridViewContent: some View {
        VStack(spacing: 12) {
            // ヘッダー（選択チェックボックス、お気に入り）
            HStack {
                if isSelectionMode {
                    Image(systemName: isSelected ? "checkmark.circle.fill" : "circle")
                        .foregroundColor(isSelected ? .primaryPink : .secondary)
                        .font(.system(size: 20))
                        .onTapGesture { onTap() }
                } else {
                    Spacer()
                }
                
                Spacer()
                
                Button(action: onFavorite) {
                    Image(systemName: isFavorite ? "heart.fill" : "heart")
                        .foregroundColor(isFavorite ? .red : .secondary)
                        .font(.system(size: 16))
                }
            }
            .padding(.horizontal, 12)
            .padding(.top, 12)
            
            // カラーパレット表示
            colorPaletteDisplay
            
            // パレット情報
            VStack(alignment: .leading, spacing: 6) {
                Text(palette.autoGeneratedTitle)
                    .font(.subheadline)
                    .fontWeight(.semibold)
                    .lineLimit(2)
                    .foregroundColor(.primary)
                
                HStack {
                    Text("\(palette.colors.count)色")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Spacer()
                    
                    Text(formatDate(palette.createdAt))
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                // タグ表示
                if !palette.tags.isEmpty {
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 4) {
                            ForEach(palette.tags.prefix(2), id: \.self) { tag in
                                Text(tag)
                                    .font(.caption2)
                                    .padding(.horizontal, 6)
                                    .padding(.vertical, 2)
                                    .background(Color.primaryPink.opacity(0.1))
                                    .foregroundColor(.primaryPink)
                                    .cornerRadius(8)
                            }
                            if palette.tags.count > 2 {
                                Text("+\(palette.tags.count - 2)")
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }
                }
            }
            .padding(.horizontal, 12)
            .padding(.bottom, 12)
        }
        .background(Color(.systemBackground))
        .cornerRadius(16)
        .shadow(color: .black.opacity(0.1), radius: 8, y: 4)
        .scaleEffect(isPressed ? 0.98 : 1.0)
        .animation(.easeInOut(duration: 0.1), value: isPressed)
        .onTapGesture {
            if !isSelectionMode {
                onTap()
            }
        }
        .onLongPressGesture(minimumDuration: 0) { isPressing in
            isPressed = isPressing
        } perform: {}
        .contextMenu {
            contextMenuItems
        }
        .overlay(
            RoundedRectangle(cornerRadius: 16)
                .stroke(isSelected ? Color.primaryPink : Color.clear, lineWidth: 2)
        )
    }
    
    // MARK: - List View Content
    private var listViewContent: some View {
        HStack(spacing: 16) {
            // 選択チェックボックス
            if isSelectionMode {
                Image(systemName: isSelected ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(isSelected ? .primaryPink : .secondary)
                    .font(.system(size: 24))
                    .onTapGesture { onTap() }
            }
            
            // 小さなカラーパレット
            HStack(spacing: 4) {
                ForEach(palette.colors.prefix(5)) { color in
                    RoundedRectangle(cornerRadius: 4)
                        .fill(color.color)
                        .frame(width: 8, height: 40)
                }
                if palette.colors.count > 5 {
                    Text("+\(palette.colors.count - 5)")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .frame(width: 20)
                }
            }
            .frame(width: 60)
            
            // パレット情報
            VStack(alignment: .leading, spacing: 4) {
                Text(palette.autoGeneratedTitle)
                    .font(.headline)
                    .fontWeight(.semibold)
                    .lineLimit(1)
                    .foregroundColor(.primary)
                
                Text("\(palette.colors.count)色 • \(formatDate(palette.createdAt))")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                if !palette.tags.isEmpty {
                    Text(palette.tags.joined(separator: " • "))
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .lineLimit(1)
                }
            }
            
            Spacer()
            
            // お気に入りボタン
            Button(action: onFavorite) {
                Image(systemName: isFavorite ? "heart.fill" : "heart")
                    .foregroundColor(isFavorite ? .red : .secondary)
                    .font(.system(size: 20))
            }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.05), radius: 4, y: 2)
        .onTapGesture {
            if !isSelectionMode {
                onTap()
            }
        }
        .contextMenu {
            contextMenuItems
        }
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(isSelected ? Color.primaryPink : Color.clear, lineWidth: 2)
        )
    }
    
    // MARK: - Color Palette Display
    private var colorPaletteDisplay: some View {
        GeometryReader { geometry in
            if palette.colors.count > 1 {
                // グラデーション表示
                LinearGradient(
                    colors: palette.colors.map { $0.color },
                    startPoint: .leading,
                    endPoint: .trailing
                )
            } else if let firstColor = palette.colors.first {
                // 単色表示
                firstColor.color
            } else {
                // フォールバック
                Color.gray.opacity(0.3)
            }
        }
        .frame(height: 100)
        .cornerRadius(12)
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color.white, lineWidth: 2)
                .shadow(color: .black.opacity(0.1), radius: 2)
        )
    }
    
    // MARK: - Context Menu
    @ViewBuilder
    private var contextMenuItems: some View {
        Button(action: onFavorite) {
            Label(
                isFavorite ? "お気に入りから削除" : "お気に入りに追加",
                systemImage: isFavorite ? "heart.slash" : "heart"
            )
        }
        
        Button(action: onDuplicate) {
            Label("複製", systemImage: "doc.on.doc")
        }
        
        Button(action: onShare) {
            Label("共有", systemImage: "square.and.arrow.up")
        }
        
        Divider()
        
        Button("削除", role: .destructive) {
            onDelete()
        }
    }
    
    // MARK: - Helper Methods
    
    private func formatDate(_ date: Date) -> String {
        let formatter = RelativeDateTimeFormatter()
        formatter.unitsStyle = .short
        return formatter.localizedString(for: date, relativeTo: Date())
    }
}

// MARK: - Palette Statistics View
struct PaletteStatisticsView: View {
    let statistics: PaletteStatistics
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("統計情報")
                .font(.headline)
                .fontWeight(.bold)
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                StatisticCard(
                    title: "総パレット数",
                    value: "\(statistics.totalPalettes)",
                    icon: "rectangle.stack",
                    color: .primaryPink
                )
                
                StatisticCard(
                    title: "お気に入り",
                    value: "\(statistics.favoritePalettes)",
                    icon: "heart.fill",
                    color: .red
                )
                
                StatisticCard(
                    title: "総色数",
                    value: "\(statistics.totalColors)",
                    icon: "paintpalette",
                    color: .primaryTurquoise
                )
                
                StatisticCard(
                    title: "タグ数",
                    value: "\(statistics.uniqueTags)",
                    icon: "tag.fill",
                    color: .primaryBlue
                )
            }
            
            if let oldestDate = statistics.oldestPalette {
                Text("最古のパレット: \(formatDate(oldestDate))")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding()
        .cardStyle()
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        return formatter.string(from: date)
    }
}

struct StatisticCard: View {
    let title: String
    let value: String
    let icon: String
    let color: Color
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
            
            Text(value)
                .font(.title2)
                .fontWeight(.bold)
                .foregroundColor(.primary)
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .padding()
        .frame(maxWidth: .infinity)
        .background(color.opacity(0.1))
        .cornerRadius(12)
    }
}

// MARK: - Preview
#Preview {
    VStack(spacing: 20) {
        PaletteGridItem(
            palette: ColorPalette.samplePalette,
            isSelected: false,
            isFavorite: false,
            isSelectionMode: false,
            isGridView: true,
            onTap: {},
            onFavorite: {},
            onDelete: {},
            onDuplicate: {},
            onShare: {}
        )
        
        PaletteGridItem(
            palette: ColorPalette.samplePalette,
            isSelected: true,
            isFavorite: true,
            isSelectionMode: true,
            isGridView: false,
            onTap: {},
            onFavorite: {},
            onDelete: {},
            onDuplicate: {},
            onShare: {}
        )
    }
    .padding()
}