//
//  PaletteDetailView.swift
//  palette
//
//  Created by Claude on 2025/08/14.
//

import SwiftUI

// MARK: - パレット詳細画面
struct PaletteDetailView: View {
    
    // MARK: - Properties
    let palette: ColorPalette
    @Environment(\.dismiss) private var dismiss
    @StateObject private var storageService = StorageService.shared
    @State private var selectedColor: ExtractedColor?
    @State private var showingShareSheet = false
    @State private var showingEditSheet = false
    @State private var showingWallpaperCreator = false
    @State private var showingDeleteAlert = false
    @State private var editedPalette: ColorPalette
    
    // MARK: - Initialization
    init(palette: ColorPalette) {
        self.palette = palette
        _editedPalette = State(initialValue: palette)
    }
    
    // MARK: - Body
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    headerSection
                    sourceImageSection
                    colorPaletteSection
                    paletteInfoSection
                    actionButtonsSection
                    colorHarmonySection
                }
                .padding(.horizontal, 20)
                .padding(.bottom, 40)
            }
            .background(backgroundGradient)
            .navigationBarHidden(true)
        }
        .sheet(item: $selectedColor) { color in
            ColorDetailSheet(
                color: color,
                viewModel: ColorExtractionViewModel(sourceImage: UIImage())
            )
        }
        .sheet(isPresented: $showingEditSheet) {
            PaletteEditSheet(palette: editedPalette) { updatedPalette in
                editedPalette = updatedPalette
                Task {
                    try? await storageService.savePalette(updatedPalette)
                }
            }
        }
        .fullScreenCover(isPresented: $showingWallpaperCreator) {
            WallpaperCreatorView(palette: palette)
        }
        .shareSheet(
            items: createShareItems(),
            isPresented: $showingShareSheet
        )
        .alert("削除確認", isPresented: $showingDeleteAlert) {
            Button("削除", role: .destructive) {
                Task {
                    try? await storageService.deletePalette(palette)
                    dismiss()
                }
            }
            Button("キャンセル", role: .cancel) { }
        } message: {
            Text("このパレットを削除してもよろしいですか？")
        }
    }
    
    // MARK: - Sections
    
    /// ヘッダーセクション
    private var headerSection: some View {
        HStack {
            Button(action: {
                dismiss()
            }) {
                Image(systemName: "xmark.circle.fill")
                    .font(.title2)
                    .foregroundColor(.secondary)
                    .background(Circle().fill(.ultraThinMaterial))
            }
            .bounceOnTap()
            
            Spacer()
            
            Text(editedPalette.autoGeneratedTitle)
                .font(.headline)
                .fontWeight(.bold)
                .lineLimit(1)
            
            Spacer()
            
            Menu {
                menuItems
            } label: {
                Image(systemName: "ellipsis.circle.fill")
                    .font(.title2)
                    .foregroundColor(.secondary)
                    .background(Circle().fill(.ultraThinMaterial))
            }
        }
        .padding(.top, 8)
    }
    
    /// ソース画像セクション
    @ViewBuilder
    private var sourceImageSection: some View {
        if let imageData = palette.sourceImageData,
           let uiImage = UIImage(data: imageData) {
            VStack(alignment: .leading, spacing: 12) {
                Text("元画像")
                    .font(.headline)
                    .fontWeight(.semibold)
                
                Image(uiImage: uiImage)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(maxHeight: 200)
                    .cornerRadius(16)
                    .shadow(color: .black.opacity(0.1), radius: 8, y: 4)
            }
        }
    }
    
    /// カラーパレットセクション
    private var colorPaletteSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("カラーパレット")
                    .font(.headline)
                    .fontWeight(.semibold)
                
                Spacer()
                
                Text("\(palette.colors.count)色")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.gray.opacity(0.2))
                    .cornerRadius(8)
            }
            
            // グラデーションプレビュー
            LinearGradient(
                colors: palette.colors.map { $0.color },
                startPoint: .leading,
                endPoint: .trailing
            )
            .frame(height: 60)
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(Color.white, lineWidth: 2)
                    .shadow(color: .black.opacity(0.1), radius: 2)
            )
            
            // 個別色表示
            LazyVGrid(columns: [
                GridItem(.adaptive(minimum: 80))
            ], spacing: 16) {
                ForEach(palette.colors) { color in
                    ColorDetailCard(color: color) {
                        selectedColor = color
                        HapticManager.shared.colorSelection()
                    }
                }
            }
        }
    }
    
    /// パレット情報セクション
    private var paletteInfoSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("パレット情報")
                .font(.headline)
                .fontWeight(.semibold)
            
            VStack(alignment: .leading, spacing: 12) {
                InfoRow(label: "作成日時", value: formatDate(palette.createdAt))
                InfoRow(label: "色数", value: "\(palette.colors.count)色")
                InfoRow(label: "色調", value: palette.colorStatistics.colorTone.displayName)
                InfoRow(label: "彩度", value: palette.colorStatistics.saturationLevel.displayName)
                
                if let dominantColor = palette.dominantColor {
                    InfoRow(label: "主要色", value: dominantColor.hexCode)
                }
            }
            .cardStyle()
            
            // タグ
            if !editedPalette.tags.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text("タグ")
                        .font(.subheadline)
                        .fontWeight(.medium)
                    
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 8) {
                            ForEach(editedPalette.tags, id: \.self) { tag in
                                Text(tag)
                                    .font(.caption)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                    .background(Color(red: 1.0, green: 0.4, blue: 0.6).opacity(0.1))
                                    .foregroundColor(Color(red: 1.0, green: 0.4, blue: 0.6))
                                    .cornerRadius(16)
                            }
                        }
                    }
                }
            }
        }
    }
    
    /// アクションボタンセクション
    private var actionButtonsSection: some View {
        VStack(spacing: 12) {
            HStack(spacing: 12) {
                PaletteActionButton(
                    title: "壁紙作成",
                    icon: "iphone",
                    backgroundColor: Color(red: 1.0, green: 0.4, blue: 0.6),
                    action: { showingWallpaperCreator = true }
                )
                
                PaletteActionButton(
                    title: "共有",
                    icon: "square.and.arrow.up",
                    backgroundColor: Color.blue,
                    action: { showingShareSheet = true }
                )
            }
            
            HStack(spacing: 12) {
                PaletteActionButton(
                    title: "編集",
                    icon: "pencil",
                    backgroundColor: Color.green,
                    action: { showingEditSheet = true }
                )
                
                PaletteActionButton(
                    title: favoriteButtonTitle,
                    icon: favoriteButtonIcon,
                    backgroundColor: Color.red,
                    action: toggleFavorite
                )
            }
        }
    }
    
    /// 配色セクション
    private var colorHarmonySection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("配色提案")
                .font(.headline)
                .fontWeight(.semibold)
            
            if let dominantColor = palette.dominantColor {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 16) {
                        HarmonyCard(
                            title: "補色",
                            colors: [dominantColor.color, dominantColor.color.complementary]
                        )
                        
                        HarmonyCard(
                            title: "三色配色",
                            colors: dominantColor.color.triadic
                        )
                        
                        HarmonyCard(
                            title: "類似色",
                            colors: dominantColor.color.analogous
                        )
                        
                        HarmonyCard(
                            title: "分割補色",
                            colors: dominantColor.color.splitComplementary
                        )
                    }
                    .padding(.horizontal, 4)
                }
            }
        }
    }
    
    /// 背景グラデーション
    private var backgroundGradient: some View {
        GradientBackground(
            colors: palette.colors.map { $0.color },
            gradientType: .linear,
            orientation: .vertical,
            opacity: 0.05
        )
        .ignoresSafeArea()
    }
    
    // MARK: - Menu Items
    
    @ViewBuilder
    private var menuItems: some View {
        Button(action: { showingEditSheet = true }) {
            Label("編集", systemImage: "pencil")
        }
        
        Button(action: toggleFavorite) {
            Label(
                favoriteButtonTitle,
                systemImage: favoriteButtonIcon
            )
        }
        
        Button(action: { showingShareSheet = true }) {
            Label("共有", systemImage: "square.and.arrow.up")
        }
        
        Button(action: duplicatePalette) {
            Label("複製", systemImage: "doc.on.doc")
        }
        
        Divider()
        
        Button("削除", role: .destructive) {
            showingDeleteAlert = true
        }
    }
    
    // MARK: - Helper Methods
    
    private var favoriteButtonTitle: String {
        storageService.favoritesPalettes.contains { $0.id == palette.id } ? "お気に入り解除" : "お気に入り"
    }
    
    private var favoriteButtonIcon: String {
        storageService.favoritesPalettes.contains { $0.id == palette.id } ? "heart.slash" : "heart"
    }
    
    private func toggleFavorite() {
        storageService.toggleFavorite(palette)
        HapticManager.shared.colorSelection()
    }
    
    private func duplicatePalette() {
        let duplicatedPalette = ColorPalette(
            sourceImageData: palette.sourceImageData,
            colors: palette.colors,
            title: "\(palette.autoGeneratedTitle) (コピー)",
            tags: palette.tags
        )
        
        Task {
            try? await storageService.savePalette(duplicatedPalette)
            HapticManager.shared.success()
        }
    }
    
    private func createShareItems() -> [Any] {
        var items: [Any] = []
        
        // パレットタイトル
        items.append(editedPalette.autoGeneratedTitle)
        
        // 色情報
        let colorCodes = palette.colors.map { $0.hexCode }.joined(separator: ", ")
        items.append("カラーコード: \(colorCodes)")
        
        // JSONエクスポート
        if let data = storageService.exportPalette(palette) {
            let tempURL = FileManager.default.temporaryDirectory
                .appendingPathComponent("\(editedPalette.autoGeneratedTitle).json")
            try? data.write(to: tempURL)
            items.append(tempURL)
        }
        
        return items
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}

// MARK: - Supporting Views

struct ColorDetailCard: View {
    let color: ExtractedColor
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            VStack(spacing: 8) {
                Circle()
                    .fill(color.color)
                    .frame(width: 60, height: 60)
                    .overlay(
                        Circle()
                            .stroke(Color.white, lineWidth: 2)
                            .shadow(color: .black.opacity(0.1), radius: 2)
                    )
                
                VStack(spacing: 2) {
                    Text(color.hexCode)
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(.primary)
                    
                    Text("\(color.percentage, specifier: "%.1f")%")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                }
            }
        }
        .buttonStyle(PlainButtonStyle())
        .bounceOnTap()
    }
}

struct InfoRow: View {
    let label: String
    let value: String
    
    var body: some View {
        HStack {
            Text(label)
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            Spacer()
            
            Text(value)
                .font(.subheadline)
                .fontWeight(.medium)
                .foregroundColor(.primary)
        }
        .padding(.vertical, 2)
    }
}

struct PaletteActionButton: View {
    let title: String
    let icon: String
    let backgroundColor: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack {
                Image(systemName: icon)
                Text(title)
            }
            .font(.headline)
            .foregroundColor(.white)
            .frame(maxWidth: .infinity)
            .padding(.vertical, 14)
            .background(backgroundColor)
            .cornerRadius(12)
        }
        .bounceOnTap()
    }
}

struct HarmonyCard: View {
    let title: String
    let colors: [Color]
    
    var body: some View {
        VStack(spacing: 12) {
            Text(title)
                .font(.subheadline)
                .fontWeight(.medium)
                .foregroundColor(.primary)
            
            HStack(spacing: 6) {
                ForEach(colors.indices, id: \.self) { index in
                    Circle()
                        .fill(colors[index])
                        .frame(width: 32, height: 32)
                        .overlay(
                            Circle()
                                .stroke(Color.white, lineWidth: 1.5)
                                .shadow(color: .black.opacity(0.1), radius: 1)
                        )
                }
            }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(.ultraThinMaterial)
        .cornerRadius(16)
    }
}

// MARK: - Palette Edit Sheet
struct PaletteEditSheet: View {
    let palette: ColorPalette
    let onSave: (ColorPalette) -> Void
    @Environment(\.dismiss) private var dismiss
    @State private var title: String
    @State private var tags: [String]
    @State private var newTag: String = ""
    
    init(palette: ColorPalette, onSave: @escaping (ColorPalette) -> Void) {
        self.palette = palette
        self.onSave = onSave
        _title = State(initialValue: palette.title ?? "")
        _tags = State(initialValue: palette.tags)
    }
    
    var body: some View {
        NavigationView {
            VStack(alignment: .leading, spacing: 20) {
                VStack(alignment: .leading, spacing: 8) {
                    Text("タイトル")
                        .font(.headline)
                    TextField("パレット名を入力", text: $title)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text("タグ")
                        .font(.headline)
                    
                    HStack {
                        TextField("新しいタグ", text: $newTag)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        
                        Button("追加") {
                            addTag()
                        }
                        .disabled(newTag.isEmpty)
                    }
                    
                    if !tags.isEmpty {
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 8) {
                                ForEach(tags, id: \.self) { tag in
                                    HStack(spacing: 4) {
                                        Text(tag)
                                            .font(.caption)
                                        
                                        Button(action: { removeTag(tag) }) {
                                            Image(systemName: "xmark.circle.fill")
                                                .font(.caption)
                                        }
                                    }
                                    .padding(.horizontal, 8)
                                    .padding(.vertical, 4)
                                    .background(Color.gray.opacity(0.2))
                                    .cornerRadius(12)
                                }
                            }
                        }
                    }
                }
                
                Spacer()
            }
            .padding()
            .navigationTitle("パレット編集")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("キャンセル") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("保存") {
                        savePalette()
                    }
                }
            }
        }
    }
    
    private func addTag() {
        let trimmedTag = newTag.trimmingCharacters(in: .whitespacesAndNewlines)
        if !trimmedTag.isEmpty && !tags.contains(trimmedTag) {
            tags.append(trimmedTag)
            newTag = ""
        }
    }
    
    private func removeTag(_ tag: String) {
        tags.removeAll { $0 == tag }
    }
    
    private func savePalette() {
        let updatedPalette = ColorPalette(
            id: palette.id,
            createdAt: palette.createdAt,
            sourceImageData: palette.sourceImageData,
            colors: palette.colors,
            title: title.isEmpty ? nil : title,
            tags: tags
        )
        
        onSave(updatedPalette)
        dismiss()
    }
}

// MARK: - Wallpaper Creator View Placeholder
struct WallpaperCreatorView: View {
    let palette: ColorPalette
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack {
                Text("壁紙作成画面")
                    .font(.title)
                
                Text("選択されたパレット: \(palette.autoGeneratedTitle)")
                    .padding()
                
                Spacer()
            }
            .navigationTitle("壁紙作成")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("閉じる") {
                        dismiss()
                    }
                }
            }
        }
    }
}

// MARK: - Preview
#Preview {
    PaletteDetailView(palette: ColorPalette.samplePalette)
}