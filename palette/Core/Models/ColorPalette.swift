//
//  ColorPalette.swift
//  palette
//
//  Created by Claude on 2025/08/14.
//

import Foundation
import SwiftUI

// MARK: - カラーパレットモデル
struct ColorPalette: Codable, Identifiable {
    let id: UUID
    let createdAt: Date
    let sourceImageData: Data?
    let colors: [ExtractedColor]
    let title: String?
    let tags: [String]
    
    init(
        id: UUID = UUID(),
        createdAt: Date = Date(),
        sourceImageData: Data? = nil,
        colors: [ExtractedColor],
        title: String? = nil,
        tags: [String] = []
    ) {
        self.id = id
        self.createdAt = createdAt
        self.sourceImageData = sourceImageData
        self.colors = colors
        self.title = title
        self.tags = tags
    }
    
    // メイン色（最も占有率の高い色）
    var dominantColor: ExtractedColor? {
        return colors.max(by: { $0.percentage < $1.percentage })
    }
    
    // パレットのグラデーション
    var gradientColors: [Color] {
        return colors.map { $0.color }
    }
    
    // パレット名の自動生成
    var autoGeneratedTitle: String {
        if let title = title, !title.isEmpty {
            return title
        }
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MM/dd HH:mm"
        return "パレット \(dateFormatter.string(from: createdAt))"
    }
    
    // 色の統計情報
    var colorStatistics: ColorStatistics {
        let totalPercentage = colors.reduce(0) { $0 + $1.percentage }
        let averageHue = colors.reduce(0) { $0 + $1.hsl.hue } / Double(colors.count)
        let averageSaturation = colors.reduce(0) { $0 + $1.hsl.saturation } / Double(colors.count)
        let averageLightness = colors.reduce(0) { $0 + $1.hsl.lightness } / Double(colors.count)
        
        return ColorStatistics(
            colorCount: colors.count,
            totalPercentage: totalPercentage,
            averageHue: averageHue,
            averageSaturation: averageSaturation,
            averageLightness: averageLightness
        )
    }
}

// MARK: - 色の統計情報
struct ColorStatistics: Codable {
    let colorCount: Int
    let totalPercentage: Double
    let averageHue: Double
    let averageSaturation: Double
    let averageLightness: Double
    
    // パレットの色調特性
    var colorTone: ColorTone {
        switch averageLightness {
        case 0..<30:
            return .dark
        case 30..<70:
            return .medium
        default:
            return .light
        }
    }
    
    // パレットの彩度特性
    var saturationLevel: SaturationLevel {
        switch averageSaturation {
        case 0..<20:
            return .low
        case 20..<60:
            return .medium
        default:
            return .high
        }
    }
}

// MARK: - 色調とその他の列挙型
enum ColorTone: String, Codable, CaseIterable {
    case light = "light"
    case medium = "medium"
    case dark = "dark"
    
    var displayName: String {
        switch self {
        case .light: return "明るい"
        case .medium: return "中間"
        case .dark: return "暗い"
        }
    }
}

enum SaturationLevel: String, Codable, CaseIterable {
    case low = "low"
    case medium = "medium"
    case high = "high"
    
    var displayName: String {
        switch self {
        case .low: return "淡い"
        case .medium: return "標準"
        case .high: return "鮮やか"
        }
    }
}

// MARK: - 壁紙設定モデル
struct WallpaperSettings: Codable {
    let gradientType: GradientType
    let orientation: GradientOrientation
    let deviceSize: DeviceSize
    let includeColorCodes: Bool
    
    init(
        gradientType: GradientType = .linear,
        orientation: GradientOrientation = .vertical,
        deviceSize: DeviceSize = .current,
        includeColorCodes: Bool = false
    ) {
        self.gradientType = gradientType
        self.orientation = orientation
        self.deviceSize = deviceSize
        self.includeColorCodes = includeColorCodes
    }
}

enum GradientType: String, Codable, CaseIterable {
    case linear = "linear"
    case radial = "radial"
    case angular = "angular"
    case diamond = "diamond"
    
    var displayName: String {
        switch self {
        case .linear: return "線形"
        case .radial: return "放射"
        case .angular: return "角度"
        case .diamond: return "ダイヤモンド"
        }
    }
}

enum GradientOrientation: String, Codable, CaseIterable {
    case vertical = "vertical"
    case horizontal = "horizontal"
    case diagonal = "diagonal"
    case custom = "custom"
    
    var displayName: String {
        switch self {
        case .vertical: return "縦"
        case .horizontal: return "横"
        case .diagonal: return "斜め"
        case .custom: return "カスタム"
        }
    }
    
    var startPoint: UnitPoint {
        switch self {
        case .vertical: return .top
        case .horizontal: return .leading
        case .diagonal: return .topLeading
        case .custom: return .topLeading
        }
    }
    
    var endPoint: UnitPoint {
        switch self {
        case .vertical: return .bottom
        case .horizontal: return .trailing
        case .diagonal: return .bottomTrailing
        case .custom: return .bottomTrailing
        }
    }
}

enum DeviceSize: String, Codable, CaseIterable {
    case current = "current"
    case iphone15Pro = "iphone15Pro"
    case iphone15ProMax = "iphone15ProMax"
    case iphone15 = "iphone15"
    case iphone14 = "iphone14"
    case iphoneSE = "iphoneSE"
    
    var displayName: String {
        switch self {
        case .current: return "現在のデバイス"
        case .iphone15Pro: return "iPhone 15 Pro"
        case .iphone15ProMax: return "iPhone 15 Pro Max"
        case .iphone15: return "iPhone 15"
        case .iphone14: return "iPhone 14"
        case .iphoneSE: return "iPhone SE"
        }
    }
    
    var size: CGSize {
        switch self {
        case .current:
            return CGSize(
                width: UIScreen.main.bounds.width * UIScreen.main.scale,
                height: UIScreen.main.bounds.height * UIScreen.main.scale
            )
        case .iphone15Pro:
            return CGSize(width: 1179, height: 2556)
        case .iphone15ProMax:
            return CGSize(width: 1290, height: 2796)
        case .iphone15:
            return CGSize(width: 1179, height: 2556)
        case .iphone14:
            return CGSize(width: 1170, height: 2532)
        case .iphoneSE:
            return CGSize(width: 750, height: 1334)
        }
    }
}

// MARK: - サンプルデータ
extension ColorPalette {
    static let samplePalette = ColorPalette(
        sourceImageData: nil,
        colors: ExtractedColor.sampleColors,
        title: "サンプルパレット",
        tags: ["サンプル", "テスト", "カラフル"]
    )
    
    static let samplePalettes: [ColorPalette] = [
        ColorPalette(
            sourceImageData: nil,
            colors: ExtractedColor.sampleColors,
            title: "夏の夕焼け",
            tags: ["夏", "夕焼け", "温かい"]
        ),
        ColorPalette(
            sourceImageData: nil,
            colors: [
                ExtractedColor(
                    hexCode: "#2C3E50",
                    rgb: RGBColor(red: 44, green: 62, blue: 80),
                    hsl: HSLColor(hue: 210, saturation: 29, lightness: 24),
                    percentage: 45.3,
                    name: "Midnight Blue"
                ),
                ExtractedColor(
                    hexCode: "#34495E",
                    rgb: RGBColor(red: 52, green: 73, blue: 94),
                    hsl: HSLColor(hue: 210, saturation: 29, lightness: 29),
                    percentage: 32.1,
                    name: "Wet Asphalt"
                )
            ],
            title: "シンプルブルー",
            tags: ["青", "シンプル", "クール"]
        )
    ]
}